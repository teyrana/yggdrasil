// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_TILECACHE_CHART_NODE_H_
#define FLATBUFFERS_GENERATED_TILECACHE_CHART_NODE_H_

#include "flatbuffers/flatbuffers.h"

namespace chart {
namespace node {

struct TileCache;

struct TileCache FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_GRID = 8
  };
  float x() const { return GetField<float>(VT_X, 0.0f); }
  float y() const { return GetField<float>(VT_Y, 0.0f); }
  const flatbuffers::Vector<uint8_t> *grid() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_GRID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) && VerifyField<float>(verifier, VT_X) &&
           VerifyField<float>(verifier, VT_Y) &&
           VerifyOffset(verifier, VT_GRID) && verifier.VerifyVector(grid()) &&
           verifier.EndTable();
  }
};

struct TileCacheBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(float x) { fbb_.AddElement<float>(TileCache::VT_X, x, 0.0f); }
  void add_y(float y) { fbb_.AddElement<float>(TileCache::VT_Y, y, 0.0f); }
  void add_grid(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> grid) {
    fbb_.AddOffset(TileCache::VT_GRID, grid);
  }
  explicit TileCacheBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TileCacheBuilder &operator=(const TileCacheBuilder &);
  flatbuffers::Offset<TileCache> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TileCache>(end);
    return o;
  }
};

inline flatbuffers::Offset<TileCache>
CreateTileCache(flatbuffers::FlatBufferBuilder &_fbb, float x = 0.0f,
                float y = 0.0f,
                flatbuffers::Offset<flatbuffers::Vector<uint8_t>> grid = 0) {
  TileCacheBuilder builder_(_fbb);
  builder_.add_grid(grid);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

inline flatbuffers::Offset<TileCache>
CreateTileCacheDirect(flatbuffers::FlatBufferBuilder &_fbb, float x = 0.0f,
                      float y = 0.0f,
                      const std::vector<uint8_t> *grid = nullptr) {
  auto grid__ = grid ? _fbb.CreateVector<uint8_t>(*grid) : 0;
  return chart::node::CreateTileCache(_fbb, x, y, grid__);
}

inline const chart::node::TileCache *GetTileCache(const void *buf) {
  return flatbuffers::GetRoot<chart::node::TileCache>(buf);
}

inline const chart::node::TileCache *
GetSizePrefixedTileCache(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<chart::node::TileCache>(buf);
}

inline bool VerifyTileCacheBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<chart::node::TileCache>(nullptr);
}

inline bool VerifySizePrefixedTileCacheBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<chart::node::TileCache>(nullptr);
}

inline void
FinishTileCacheBuffer(flatbuffers::FlatBufferBuilder &fbb,
                      flatbuffers::Offset<chart::node::TileCache> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTileCacheBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<chart::node::TileCache> root) {
  fbb.FinishSizePrefixed(root);
}

} // namespace node
} // namespace chart

#endif // FLATBUFFERS_GENERATED_TILECACHE_CHART_NODE_H_
